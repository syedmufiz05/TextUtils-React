{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","Alert","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","typ","msg","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","heading","value","onChange","event","target","style","backgroundColor","mode","rows","newText","showAlert","replace","split","length","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","color","anotherMode","propTypes","PropTypes","string","aboutText","defaultProps","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.54891fb1.chunk.js","sourcesContent":["import React from \"react\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={\r\n        'navbar navbar-expand-lg navbar-dark bg-dark'\r\n      }\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <a className=\"nav-link\" href=\"/about\">\r\n                {props.aboutText}\r\n              </a> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className={'form-check form-switch text-light'}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              Dark Mode Enabled\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n const capitalize= (word)=>{\r\n   const lower= word.toLowerCase();\r\n  return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n  }\r\n  return (\r\n   props.alert && <div className={'alert alert-success alert-dismissible fade show'} role=\"alert\">\r\n      <strong>{capitalize(props.alert.typ)}</strong>: {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\",\"success\");\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase!\",\"success\");\r\n  };\r\n\r\n  const textRemoveClick=()=>{\r\n   let newText= text.replace(text,'');\r\n   setText(newText);\r\n   props.showAlert(\"All text are removed!\",\"success\");\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{backgroundColor:props.mode==='dark'?'gray':'white'}}\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n          Convert to uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>\r\n          Convert to lowercase\r\n        </button>\r\n        <button className=\"btn btn-danger mx-1\" onClick={textRemoveClick}>\r\n          Click to remove all texts\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <h1>Your text summary</h1>\r\n        <p> \r\n          {text.split(\" \").length} words & {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport Alert from './components/Alert';\r\nimport Textform from './components/Textform';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Routes,\r\n//   Route\r\n// } from \"react-router-dom\";\r\n\r\nexport default App;\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light');\r\n  const [alert, setAlert] = useState('');\r\n\r\n  const showAlert=(message,type)=>{\r\n    setAlert({\r\n      msg:message,\r\n      typ:type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1000);\r\n  }\r\n\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark')\r\n      document.body.style.backgroundColor='#042743';\r\n      document.body.style.color='white';\r\n      showAlert(\"Dark mode has been enabled\",\"success\");\r\n    } else {\r\n      setMode('light')\r\n      document.body.style.backgroundColor='white';\r\n      document.body.style.color='black';\r\n      showAlert(\"Light mode has been enabled\",\"success\");\r\n    }\r\n  }\r\n\r\n  const anotherMode=()=>{\r\n    if (mode==='light') {\r\n      setMode('dark')\r\n      document.body.style.backgroundColor='green';\r\n      document.body.style.color='white';\r\n      showAlert(\"Green mode has been enabled\",\"success\");\r\n    }else{\r\n      setMode('light')\r\n      document.body.style.backgroundColor='white';\r\n      document.body.style.color='black';\r\n      showAlert(\"Light mode has been enabled\",\"success\");\r\n    }\r\n  }\r\n  return (\r\n    // <Router>\r\n    <>\r\n      <Navbar title=\"Text\" mode={mode} toggleMode={toggleMode} \r\n       anotherMode={anotherMode}\r\n      />\r\n      <Alert alert={alert}/>\r\n      <div className=\"container my-3\">\r\n        {/* <Routes> */}\r\n          {/* <Route path=\"/about\" element={<About />}/> */}\r\n          {/* <Route path=\"/\" element={<Textform heading=\"Enter the text to analyze below\" mode={mode} showAlert={showAlert}/>}/> */}\r\n        {/* </Routes> */}\r\n        <Textform heading=\"Enter the text to analyze below\" mode={mode} showAlert={showAlert}/>\r\n      </div>\r\n    </>\r\n      // </Router>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"Insert title here\",\r\n  aboutText: \"About\",\r\n};\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}